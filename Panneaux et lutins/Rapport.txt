Indice: pour bien répondre à ces deux questions, essayez de voir si votre réponse fonctionne dans votre application. (Pour chacune, ce ne sont que quelques lignes à modifier dans le nuanceur!)


Q1: Dans la partie 1, des points de taille fixe sont affichés à l'écran. Leur taille est donnée par la variable gl_PointSize.
    i) Comment faire pour que la taille d'un point varie de façon inverse à sa distance du plan avant du volume de visualisation, c'est-à-dire qu'il soit plus gros lorsqu'il est plus près de la caméra ?
    
    Il suffit de multiplier la taille du point par l'inverse de la distance entre celui-ci et la caméra. Celle-ci peut être obtenue du main, à partir de Camera.dist.

    
    ii) Donnez l'énoncé GLSL que vous utiliseriez pour implanter ceci.

	gl_PointSize *= 1 / (gl_Position.z / gl_Position.w - float( distanceCamera ) );



Q2: Pour afficher un flocon qui tourne sur lui-même, on a appliqué une matrice de rotation sur les quatre sommets.
    i) Pourrait-on faire tourner le flocon en appliquant la même matrice de rotation sur les coordonnées de texture plutôt que sur les coordonnées des sommets?
    
    Oui, par contre, le rendu ne serait pas identique. Les 4 coins du panneau conserveraient leur position et ce serait la texture à l'intérieur qui effectuerait la rotation. C'est d'ailleurs ce que nous avions initialement fait avec :
    if ( texnumero == 1 ) {
			texCoord = matrRotation * coins[i] + vec2( 0.5, 0.5 );
		}


    ii) Quel problème observerions-nous alors et comment devrait-il être corrigé? Afin de facilement répondre à cette question, vous pouvez remplacer (temporairement!) l'image du flocon de ce TP par l'image de l'échiquier du TP3.  Si vous appliquez ensuite la matrice de rotation sur les coordonnées de texture plutôt que sur les coordonnées des sommets, vous pourrez alors très bien voir ce qui se passe.
    
    Si les diagonales de la texture sont plus grandes que les dimensions du panneau, celle-ci sera coupée par les bords du panneau pendant la rotation, puisque la texture dépasserait de l'espace d'affichage. Une solution simple serait d'appliquer un facteur de redimensionnement aux coordonnées de la texture pour les garder dans les dimensions du panneau.